<?php
$cmap = $this->cmap();
?>
<script>
    let activities = [
        ['Work'],
        ['Eat'],
        ['Commute'],
        ['Play Game'],
        ['Sleep']
    ];
    let pro0= [
        ['pro 01'],
        ['pro 02'],
        ['pro 03'],
        ['pro 04'],
        ['pro 05']
    ];
    let pro1= [
        ['pro 11'],
        ['pro 11'],
        ['pro 11'],
        ['pro 11'],
        ['pro 11']
    ];
    let pro2= [
        ['pro 21'],
        ['pro 21'],
        ['pro 21'],
        ['pro 21'],
        ['pro 21']
    ];
    let pro3= [
        ['pro 31'],
        ['pro 31'],
        ['pro 31'],
        ['pro 31'],
        ['pro 31']
    ];
    let pro4= [
        ['pro 41'],
        ['pro 41'],
        ['pro 41'],
        ['pro 41'],
        ['pro 1']
    ];

    let tables = new Array(activities.length).fill(1).map((v1,i1)=>{
        return {
            tableName:activities[i1][0],
            id:'table'+i1,
            cols:new Array(('pro'+i1).length).fill(1).map((v2,i2)=>{
                return {
                    id:'table'+i1+'cols'+i2,
                    itemName:'pro'+i1+[i2],
                }
            }),
        }
    })

    let links = [
        {
            source:'table'+0,
            target:'table'+1,
            relation:'line1',
            sourceIndex:1,
            targetIndex:1,
            value:1,
        },
        {
            source:'table'+0,
            target:'table'+1,
            relation:'line1',
            sourceIndex:2,
            targetIndex:2,
            value:1,
        },
        {
            source:'table'+1,
            target:'table'+2,
            relation:'line1',
            sourceIndex:2,
            targetIndex:2,
            value:1,
        },
    ]
</script>
<style>
    .table-foot-btn{
        fill:blue;
        font-size: 12px;
        text-decoration: underline;
        cursor: pointer;
        dominant-baseline: middle;
        /*text-anchor: middle;*/
    }
</style>


<div id="wrap">
    <svg id="svg" xmlns="http://www.w3.org/2000/svg" style="border:1px dashed #000;background-color: #F8F8F9;"></svg>
</div>

<script>
    let width = 1200
    let height = 800
    let svg = d3.select('svg')
        .attr('width',width)
        .attr('height',height)
    // .attr('viewBox',`-${width/2} -${height/2} ${width} ${height}`)


    let colsHeight = 30;//Hauteur du champ
    let tableTitleHeight = 30;//Hauteur du champ
    let tableFootHeight = 30;//Hauteur du champ
    let colsWidth = 200;
    let offLine = 20;//Décalage du nœud de la connexion

    //Définition de style
    let lineStyle = {
        strokeDefault:'#80848f',
        strokeWidthDefault:'2',
        strokeLight:'#19be6b',
        strokeWidthLight:'3',
    }
    let colsStyle = {
        fillDefalt:'#ccc',
        fillLight:'#19be6b',
    }

    let initObj = initData(svg);
    initObj.svgAddNode()
    window.setTimeout(initObj.changePort,100)

    function initData(svgEle){
        //initialisation
        let g, gPosition;
        //Initialiser la mise en page dirigée par la force
        let forceSimulation = d3.forceSimulation()
            .force('charge',d3.forceManyBody().strength(-100))//Force de charge
            .force('forceCollide',d3.forceCollide().radius(colsWidth/2+50))//Détection de collision
            .force('link',d3.forceLink().id(function(d){return d.id}))//link
        initSVG()
        //Première exécution
        function initSVG(){
            let zoom = d3.zoom()
                .scaleExtent([0.1,10])
                .on("zoom",function(d){
                    g.attr("transform",function(){//initialisation
                        return `translate(${d3.event.transform.x+gPosition.x},${d3.event.transform.y+gPosition.y}) scale(${d3.event.transform.k})`
                    })
                })
            svgEle.call(zoom).on('dblclick.zoom',null);
            g = svgEle.append('g')
            g.append("g").attr('class','links')
        }

        //Position initiale
        function changePort(){
            gPosition = svgEle.select('g').node().getBBox()
            gPosition.x = -gPosition.x+20
            gPosition.y = -gPosition.y+20

            g.transition().delay(0).attr('transform',function(){
                return `translate(${gPosition.x},${gPosition.y}) scale(1)`
            })
        }


        //dessiner

        let allTables, addTablesData, allLinks, addLinksData, allColsGs, addColsGsData,allFooter, addFooterData;

        function svgAddNode(){
            forceInit(tables,links)
            addTables()
            addLinks()
            initDrag()
        }

        function tick(){//force Fonction d'exécution itérative
            allTables.attr("transform", function(d){
                return `translate(${d.x},${d.y})`
            })
            allLinks.attr('points',linkFn)
        }
        function end(){//force end une fonction

        }
        function forceInit(nodes,links){//Ajouter des attributs d'emplacement aux objets d'origine des nœuds et des liens
            forceSimulation.nodes(nodes)
                .on('end',end)
                .on('tick',tick);
            forceSimulation.force('link')
                .links(links)
                .distance(function (d) {
                    return d.value * colsWidth + 100
                })
        }
        function addTables(){
            addTablesData = g.selectAll('.tbClass').data(tables)
                .enter()
                .append('g')
                .attr('class','tbClass')
                .attr('id',function(d){return d.id})
                .attr("transform", function(d){
                    return `translate(${d.x},${d.y})`
                })
            allTables = g.selectAll('.tbClass').data(tables)

            addTitle()
            addColsWrap()
            addFooter()
        }
        function delTables(){
            // allTables = g.selectAll('.tbClass').data(tables)
            allTables.exit().remove()
            // delLinks()
        }
        function initDrag(){
            allTables.call(d3.drag()//Ajouter un événement de glissement
                .on('start',startFn)
                .on('drag',dragFn)
                .on('end',endFn)
            )
            //Ajouter un événement de survol de la souris
            allTables.on('mouseenter',function(d){
                hoverLight.call(this,d,1)
            })
                .on('mouseleave',function(d){
                    hoverLight.call(this,d,0)
                })
        }
        //Calcul de la connexion gauche et droite
        function linkFn(d){
            let res = []
            if(d.source.x < d.target.x){
                res[2] = [d.target.x - offLine, d.target.y]
                res[3] = [d.target.x, d.target.y]
                if((d.source.x + colsWidth + offLine*0) < d.target.x ){
                    res[0] = [d.source.x + colsWidth, d.source.y]
                    res[1] = [d.source.x + colsWidth + offLine, d.source.y]
                }else{
                    res[0] = [d.source.x, d.source.y]
                    res[1] = [d.source.x - offLine, d.source.y]
                }
            }else{
                res[1] = [d.source.x - offLine, d.source.y]
                res[0] = [d.source.x, d.source.y]
                if((d.target.x + colsWidth + offLine*0) < d.source.x ){
                    res[3] = [d.target.x + colsWidth, d.target.y]
                    res[2] = [d.target.x + colsWidth + offLine, d.target.y]
                }else{
                    res[3] = [d.target.x, d.target.y]
                    res[2] = [d.target.x  - offLine, d.target.y]
                }
            }
            res[0][1] += d.sourceIndex*colsHeight + colsHeight/2
            res[1][1] += d.sourceIndex*colsHeight + colsHeight/2
            res[2][1] += d.targetIndex*colsHeight + colsHeight/2
            res[3][1] += d.targetIndex*colsHeight + colsHeight/2
            return res.map(v=>v.join(',')).join(' ')
        }
        function startFn(d){//拖动开始
            if(!d3.event.active){
                forceSimulation.alphaTarget(0.8).restart()//[0,1]
            }
            d.fx = d.x
            d.fy = d.y
        }
        function dragFn(d){//Glisser
            d.fx = d3.event.x
            d.fy = d3.event.y
        }
        function endFn(d){//Faites glisser l'extrémité
            if(!d3.event.active){
                forceSimulation.alphaTarget(0)
            }
            // d.fx = null
            // d.fy = null
        }
        //Ajouter une connexion
        function addLinks(){
            addLinksData = d3.select('.links')
                .selectAll("polyline")
                .data(links)
                .enter()
                .append("polyline")
                .attr("fill",'none')
                .attr("stroke",'#000')
                .attr("stroke-width",2)
                .attr('class','link-polyline')

            //arrow
            svg.append("svg:defs").append("svg:marker")
                .attr("id", "arrow")
                .attr("refX", 6)
                .attr("refY", 6)
                .attr("markerWidth", 30)
                .attr("markerHeight", 30)
                .attr("markerUnits","userSpaceOnUse")
                .attr("orient", "auto")
                .append("path")
                .attr("d", "M 0 0 12 6 0 12 3 6")
                .style("fill", "black");

            allLinks =  d3.select('.links')
                .selectAll('polyline')
                .data(links)
                .attr("marker-end", "url(#arrow)");
        }
        function delLinks(){
            allLinks.exit().remove()
        }
        //Ajouter une bordure
        function gsAddBorder(){
            addTablesData.append('rect')
                .attr('height',function(d){
                    return colsHeight*d.cols.length + tableTitleHeight
                })
                .attr('width',function(d){
                    return colsWidth
                })
                .attr('rx',5)
                .attr('stroke','#5cadff')
                .attr('stroke-width','1px')
                .attr('fill-opacity','0')
        }
        //Ajouter un en-tête
        function addTitle() {
            let tTitle = addTablesData.append('g')
                .attr('class','table-title')

            tTitle.append('rect')
                // .attr('rx',5)
                .attr('height',function(d){
                    return tableTitleHeight
                })
                .attr('width',function(d){
                    return colsWidth
                })
                .attr('fill','#FBE17E')
                .style('cursor','pointer')
            // .attr("transform", "translate(" + 0 + ", " + 10 + ")")
            tTitle.append('text')
                .text(function(d){
                    return d.tableName
                })
                .attr('dx',function(){
                    return colsWidth/2
                })
                .attr('dy',tableTitleHeight/2)
                .attr('class','svg-text')
                .attr('text-anchor','middle')
                .attr('dominant-baseline','middle')
                .attr('fill','#000')
        }
        //Créer un champ g
        function addColsWrap(){
            addTablesData.append('g')
                .attr('class','table-cols')
                .attr('transform',"translate(" + 0 + ", " + tableTitleHeight + ")")

            addColsGs()
        }
        function addColsGs(){
            addColsGsData = addTablesData.select('.table-cols')
                .selectAll('g')
                .data(function(d){
                    return d.cols
                })
                .enter()
                .append('g')
                .attr("transform",(d,i)=>`translate(${0},${i*colsHeight})`)
                .attr('id',function(d){ return d.id })

            allColsGs = addTablesData.select('.table-cols')
                .selectAll('g')
                .data(function(d){
                    return d.cols
                })

            colsAdd()
        }
        function addExtColsGs(obj){
            addColsGsData = d3.select('#'+obj.id).select('.table-cols')
                .selectAll('g')
                .data(function(d){
                    return d.cols
                })
                .enter()
                .append('g')
                .attr("transform",(d,i)=>`translate(${0},${i*colsHeight})`)
                .attr('id',function(d){ return d.id })
            colsAdd()
        }
        function delColsGs(){
            allColsGs = allTables.select('.table-cols')
                .selectAll('g')
                .data(function(d){
                    return d.cols
                })
            allColsGs.exit().remove()
        }
        //Ajouter des informations de champ
        function colsAdd(){
            addColsGsData.append('rect')
                .attr('height',function(d){
                    return colsHeight
                })
                .attr('width',function(d){
                    return colsWidth
                })
                .attr('fill','#C5D2E7')
            addColsGsData.append('text')
                .attr('class','svg-text')
                .text(function(d){
                    return d.itemName
                })
                .attr('dx',function(){
                    // return colsWidth/2
                    return 10
                })
                .attr('dy',colsHeight/2)
                .attr('dominant-baseline','middle')
                .attr('fill','#000')

            //Ajouter un point culminant
            addColsGsData.on('mouseenter',function(d){
                colsLight.call(this,d,1)
            })
                .on('mouseleave',function(d){
                    colsLight.call(this,d,0)
                })
        }
        //Point culminant du nœud
        function colsLight(data,isEnter){
            lineLight(data,isEnter)
            d3.select(this)
                .select('rect')
                .transition()
                // .delay(50)
                .attr('fill',isEnter ? colsStyle.fillLight : colsStyle.fillDefalt)

        }
        //Surlignage de la ligne
        function lineLight(data,isEnter){
            d3.selectAll('.link-polyline')
                .attr('stroke',function(d){
                    let source = d.source.cols[d.sourceIndex-1]
                    let target = d.target.cols[d.targetIndex-1]
                    if(data.id === source.id || data.id === target.id ){
                        return isEnter ? lineStyle.strokeLight : lineStyle.strokeDefault
                    }else{
                        return lineStyle.strokeDefault
                    }
                })
                .attr('stroke-width',function(d){
                    let source = d.source.cols[d.sourceIndex-1]
                    let target = d.target.cols[d.targetIndex-1]
                    if(data.id === source.id || data.id === target.id ){
                        return isEnter ? lineStyle.strokeWidthLight : lineStyle.strokeWidthDefault
                    }else{
                        return lineStyle.strokeWidthDefault
                    }
                })
        }

        //Élever le niveau du nœud
        function hoverLight(data,isEnter){
            // let preData = Object.assign(data)
            // if(isEnter){
            //   d3.select(this).raise()
            // }else{
            //   d3.select(this).lower()
            // }
        }

        //Ajouter un bouton
        function addFooter(){
            addFooterData = addTablesData.append('g')
                .attr('class','table-foot')
            addFooterData.append('rect')
                .attr('width',colsWidth)
                .attr('height',tableFootHeight)
                .attr('fill','#f8f8f9')

            addFooterData.append('text')
                .attr('class','table-foot-btn table-foot-btn-left')
                .attr('dy',tableFootHeight/2)
                .attr('dx',10)
                .on('click',addCols)

            addFooterData.append('text')
                .attr('class','table-foot-btn table-foot-btn-right')
                .attr('dy',tableFootHeight/2)
                .attr('dx',colsWidth-60)
                .on('click',addNode)

            allFooter = allTables.selectAll('.table-foot')
            updateFoot()
        }
        function updateFoot(){

            //allFooter = allTables.selectAll('.table-foot')

            allFooter.attr('transform',function(d){
                return `translate(${0},${tableTitleHeight + colsHeight*d.cols.length})`
            })
        }
        return {
            changePort,
            svgAddNode,
            addExtColsGs,
            updateFoot,
            delColsGs,
            delTables,
        }
    }

    function addNode(data){
        let temp = tables.length
        let random = Math.floor(Math.random()*6)+1
        if(data.isOpen){ //Si le nœud est ouvert, la fonction en cours n'est pas terminée
            data.isOpen = false
            // tables = tables.filter(v=>v.id != data.id)
            console.table(tables)
            // links = links.filter(v=>v.source.id != data.id && v.target.id != data.id)
            // initObj.delTables()
            initObj.svgAddNode()
        }else{
            tables.push({
                tableName:'sda_fdsf'+temp,
                id:'table'+temp,
                cols:new Array(random).fill(1).map((v2,i2)=>{
                    return {
                        id:'table'+temp+'cols'+i2,
                        itemName:'table'+temp+'colsName'+i2,
                    }
                }),
            })
            links.push({
                source:data.id,
                target:'table'+temp,
                relation:'line1',
                sourceIndex:1,
                targetIndex:Math.floor(Math.random()*random)+1,
                value:1,
            })
            data.isOpen = true
            initObj.svgAddNode()
        }
        console.log(tables)
        console.log(links)

    }

    function addCols(data){
        let len = data.cols.length
        let col = new Array(2).fill(1).map((v,i2)=>{
            return {
                id: data.id+'cols'+(i2+len),
                itemName:data.id+'colsName'+(i2+len),
            }
        })
        if(data.isAddCols){//收起
            data.isAddCols = false
            data.text = [btnText.leftOpen,btnText.rightOpen]
            data.allCols = data.cols
            data.cols = data.linkCols
            initObj.delColsGs()
        }else{//展开
            data.isAddCols = true
            data.text = [btnText.leftClose,btnText.rightClose]
            data.linkCols = data.cols.concat()
            data.cols = data.cols.concat(col)
            initObj.addExtColsGs(data)
        }

        initObj.updateFoot()
    }

</script>

<input type="hidden" value="" id="tmp" name="tmp"/>